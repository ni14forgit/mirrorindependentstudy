{"ast":null,"code":"import _slicedToArray from \"/Users/nishantiyengar/Desktop/mirrorindependentstudy/smartscreen/weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nishantiyengar/Desktop/mirrorindependentstudy/smartscreen/weather/src/App.js\";\nimport React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport io from \"socket.io-client\";\nlet socket; //const ENDPOINT = \"localhost:5000\";\n\nconst ENDPOINT = \"10.197.88.190:5000\";\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nconst GEO_KEY = process.env.REACT_APP_GEOLOCATION_API_KEY;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n\n      if (city && country) {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter the values.\"\n        });\n      }\n    };\n\n    this.apiCallToWeather = async function (lat, lng) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`).catch(function (error) {\n        console.log(error.message);\n      });\n      const data = await api_call.json();\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n      console.log(data);\n    };\n\n    this.mobileGetWeather = async () => {\n      var url = \"https://ipinfo.io?token=\" + GEO_KEY;\n      console.log(url);\n      const api_call = await fetch(url);\n      const data = await api_call.json();\n      const location = data[\"loc\"];\n\n      const _location$split = location.split(\",\"),\n            _location$split2 = _slicedToArray(_location$split, 2),\n            lat = _location$split2[0],\n            lng = _location$split2[1];\n\n      this.apiCallToWeather(lat, lng); // console.log(data);\n      // console.log(location);\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 5000);\n    socket = io(ENDPOINT);\n    socket.on(\"weather\", () => {\n      console.log(\"wing\"); //this.mobileGetWeather();\n    });\n    socket.emit(\"join\");\n  }\n\n  componentDidUpdate() {\n    this.intervalID = setInterval(() => this.tick(), 3600000); // socket.on(\"weather\", () => {\n    //   console.log(\"wing\");\n    // });\n  }\n\n  componentWillUnmount() {\n    socket.emit(\"disconnect\");\n    socket.off();\n  }\n\n  tick() {\n    this.mobileGetWeather();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-5 title-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Titles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-xs-7 form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Form, {\n      getWeather: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.mobileGetWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Mobile Weather\"), React.createElement(Weather, {\n      temperature: this.state.temperature,\n      humidity: this.state.humidity,\n      city: this.state.city,\n      country: this.state.country,\n      description: this.state.description,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nishantiyengar/Desktop/mirrorindependentstudy/smartscreen/weather/src/App.js"],"names":["React","Titles","Form","Weather","io","socket","ENDPOINT","API_KEY","process","env","REACT_APP_WEATHER_API_KEY","GEO_KEY","REACT_APP_GEOLOCATION_API_KEY","App","Component","state","temperature","undefined","city","country","humidity","description","error","getWeather","e","preventDefault","target","elements","value","api_call","fetch","data","json","setState","main","temp","name","sys","weather","apiCallToWeather","lat","lng","catch","console","log","message","mobileGetWeather","url","location","split","componentDidMount","intervalID","setInterval","tick","on","emit","componentDidUpdate","componentWillUnmount","off","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,IAAIC,MAAJ,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,oBAAjB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA5B;AACA,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,6BAA5B;;AACA,MAAMC,GAAN,SAAkBb,KAAK,CAACc,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,WAAW,EAAEC,SADP;AAENC,MAAAA,IAAI,EAAED,SAFA;AAGNE,MAAAA,OAAO,EAAEF,SAHH;AAING,MAAAA,QAAQ,EAAEH,SAJJ;AAKNI,MAAAA,WAAW,EAAEJ,SALP;AAMNK,MAAAA,KAAK,EAAEL;AAND,KADwB;;AAAA,SAoChCM,UApCgC,GAoCnB,MAAMC,CAAN,IAAW;AACtBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMP,IAAI,GAAGM,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBT,IAAlB,CAAuBU,KAApC;AACA,YAAMT,OAAO,GAAGK,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBR,OAAlB,CAA0BS,KAA1C;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,oDAAmDZ,IAAK,IAAGC,OAAQ,UAASZ,OAAQ,eAD3D,CAA5B;AAGA,YAAMwB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AACA,UAAId,IAAI,IAAIC,OAAZ,EAAqB;AACnB,aAAKc,QAAL,CAAc;AACZjB,UAAAA,WAAW,EAAEe,IAAI,CAACG,IAAL,CAAUC,IADX;AAEZjB,UAAAA,IAAI,EAAEa,IAAI,CAACK,IAFC;AAGZjB,UAAAA,OAAO,EAAEY,IAAI,CAACM,GAAL,CAASlB,OAHN;AAIZC,UAAAA,QAAQ,EAAEW,IAAI,CAACG,IAAL,CAAUd,QAJR;AAKZC,UAAAA,WAAW,EAAEU,IAAI,CAACO,OAAL,CAAa,CAAb,EAAgBjB,WALjB;AAMZC,UAAAA,KAAK,EAAE;AANK,SAAd;AAQD,OATD,MASO;AACL,aAAKW,QAAL,CAAc;AACZjB,UAAAA,WAAW,EAAEC,SADD;AAEZC,UAAAA,IAAI,EAAED,SAFM;AAGZE,UAAAA,OAAO,EAAEF,SAHG;AAIZG,UAAAA,QAAQ,EAAEH,SAJE;AAKZI,UAAAA,WAAW,EAAEJ,SALD;AAMZK,UAAAA,KAAK,EAAE;AANK,SAAd;AAQD;AACF,KA/D+B;;AAAA,SAiEhCiB,gBAjEgC,GAiEb,gBAAeC,GAAf,EAAoBC,GAApB,EAAyB;AAC1C,YAAMZ,QAAQ,GAAG,MAAMC,KAAK,CACzB,sDAAqDU,GAAI,QAAOC,GAAI,UAASlC,OAAQ,eAD5D,CAAL,CAErBmC,KAFqB,CAEf,UAASpB,KAAT,EAAgB;AACtBqB,QAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAK,CAACuB,OAAlB;AACD,OAJsB,CAAvB;AAKA,YAAMd,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAKC,QAAL,CAAc;AACZjB,QAAAA,WAAW,EAAEe,IAAI,CAACG,IAAL,CAAUC,IADX;AAEZjB,QAAAA,IAAI,EAAEa,IAAI,CAACK,IAFC;AAGZjB,QAAAA,OAAO,EAAEY,IAAI,CAACM,GAAL,CAASlB,OAHN;AAIZC,QAAAA,QAAQ,EAAEW,IAAI,CAACG,IAAL,CAAUd,QAJR;AAKZC,QAAAA,WAAW,EAAEU,IAAI,CAACO,OAAL,CAAa,CAAb,EAAgBjB,WALjB;AAMZC,QAAAA,KAAK,EAAE;AANK,OAAd;AAQAqB,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACD,KAjF+B;;AAAA,SAmFhCe,gBAnFgC,GAmFb,YAAY;AAC7B,UAAIC,GAAG,GAAG,6BAA6BpC,OAAvC;AACAgC,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACA,YAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAACiB,GAAD,CAA5B;AACA,YAAMhB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAMgB,QAAQ,GAAGjB,IAAI,CAAC,KAAD,CAArB;;AAL6B,8BAMViB,QAAQ,CAACC,KAAT,CAAe,GAAf,CANU;AAAA;AAAA,YAMtBT,GANsB;AAAA,YAMjBC,GANiB;;AAO7B,WAAKF,gBAAL,CAAsBC,GAAtB,EAA2BC,GAA3B,EAP6B,CAQ7B;AACA;AACD,KA7F+B;AAAA;;AAUhCS,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKC,IAAL,EAAP,EAAoB,IAApB,CAA7B;AACAhD,IAAAA,MAAM,GAAGD,EAAE,CAACE,QAAD,CAAX;AACAD,IAAAA,MAAM,CAACiD,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBX,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADyB,CAEzB;AACD,KAHD;AAIAvC,IAAAA,MAAM,CAACkD,IAAP,CAAY,MAAZ;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKL,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKC,IAAL,EAAP,EAAoB,OAApB,CAA7B,CADmB,CAEnB;AACA;AACA;AACD;;AAEDI,EAAAA,oBAAoB,GAAG;AACrBpD,IAAAA,MAAM,CAACkD,IAAP,CAAY,YAAZ;AACAlD,IAAAA,MAAM,CAACqD,GAAP;AACD;;AAEDL,EAAAA,IAAI,GAAG;AACL,SAAKP,gBAAL;AACD;;AA6DDa,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE,KAAKpC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAQ,MAAA,OAAO,EAAE,KAAKuB,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALF,EAQE,oBAAC,OAAD;AACE,MAAA,WAAW,EAAE,KAAK/B,KAAL,CAAWC,WAD1B;AAEE,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWK,QAFvB;AAGE,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWG,IAHnB;AAIE,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,OAJtB;AAKE,MAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWM,WAL1B;AAME,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,KANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CAJF,CADF,CADF,CADF,CADF,CADF;AAgCD;;AAhI+B;;AAmIlC,eAAeT,GAAf","sourcesContent":["import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport io from \"socket.io-client\";\nlet socket;\n\n//const ENDPOINT = \"localhost:5000\";\nconst ENDPOINT = \"10.197.88.190:5000\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nconst GEO_KEY = process.env.REACT_APP_GEOLOCATION_API_KEY;\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 5000);\n    socket = io(ENDPOINT);\n    socket.on(\"weather\", () => {\n      console.log(\"wing\");\n      //this.mobileGetWeather();\n    });\n    socket.emit(\"join\");\n  }\n\n  componentDidUpdate() {\n    this.intervalID = setInterval(() => this.tick(), 3600000);\n    // socket.on(\"weather\", () => {\n    //   console.log(\"wing\");\n    // });\n  }\n\n  componentWillUnmount() {\n    socket.emit(\"disconnect\");\n    socket.off();\n  }\n\n  tick() {\n    this.mobileGetWeather();\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values.\"\n      });\n    }\n  };\n\n  apiCallToWeather = async function(lat, lng) {\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`\n    ).catch(function(error) {\n      console.log(error.message);\n    });\n    const data = await api_call.json();\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: \"\"\n    });\n    console.log(data);\n  };\n\n  mobileGetWeather = async () => {\n    var url = \"https://ipinfo.io?token=\" + GEO_KEY;\n    console.log(url);\n    const api_call = await fetch(url);\n    const data = await api_call.json();\n    const location = data[\"loc\"];\n    const [lat, lng] = location.split(\",\");\n    this.apiCallToWeather(lat, lng);\n    // console.log(data);\n    // console.log(location);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  {/* <button onClick={this.getGeolocatedWeather}>\n                    Your Weather\n                  </button> */}\n                  <button onClick={this.mobileGetWeather}>\n                    Mobile Weather\n                  </button>\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}